"use strict";var viewModel={posts:ko.observableArray(),filteredPosts:ko.observableArray(),categories:ko.observableArray(),loggedinUser:ko.observable(),username:ko.observable(localStorage.getItem("username")),successMessage:ko.observable(),failuerMessage:ko.observable(),checkLoggedinUser:function(){null!=localStorage.getItem("access_token")?viewModel.loggedinUser(!0):viewModel.loggedinUser(!1)},signin:function(){var e=viewModel.signinInputs,t=e.email,o=e.password,a=[t,o];for(var s in a){var i=a[s];if(!0!==i.valid())return void i.valid(!1)}do_signin({email:t.value(),password:o.value()})&&($(".modal").modal("hide"),viewModel.fetchData())},signinInputs:{email:{value:ko.observable(""),valid:ko.observable()},password:{value:ko.observable(""),valid:ko.observable()}},validateSigninInputs:{validateEmail:function(){var e=viewModel.signinInputs.email;e.value().length<6||-1==e.value().indexOf("@")?e.valid(!1):e.valid(!0)},validatePassword:function(){var e=viewModel.signinInputs.password;e.value().length<6||-1!=e.value().indexOf(" ")?e.valid(!1):e.valid(!0)}},saveAccessToken:function(e){localStorage.setItem("access_token",e),viewModel.fetchData()},signup:function(){var e=viewModel.signupInputs,t=e.username,o=e.email,a=e.password,s=[t,o,a];for(var i in s){var n=s[i];if(!0!==n.valid())return void n.valid(!1)}var l={username:t.value(),password:a.value(),email:o.value()};if(do_signup(l)){$(".modal").modal("hide"),viewModel.successMessage("You are now digned up, and can login..")}},signupInputs:{username:{value:ko.observable(""),valid:ko.observable()},email:{value:ko.observable(""),valid:ko.observable()},password:{value:ko.observable(""),valid:ko.observable()}},validateSignupInputs:{validateUsername:function(){var e=viewModel.signupInputs.username;e.value().length<2?e.valid(!1):e.valid(!0)},validateEmail:function(){var e=viewModel.signupInputs.email;e.value().length<6||-1==e.value().indexOf("@")?e.valid(!1):e.valid(!0)},validatePassword:function(){var e=viewModel.signupInputs.password;e.value().length<6||-1!=e.value().indexOf(" ")?e.valid(!1):e.valid(!0)}},signout:function(){localStorage.removeItem("access_token"),localStorage.removeItem("username"),viewModel.removeDataFromView(),viewModel.loggedinUser(!1),viewModel.username("")},getCategories:function(){fetch("http://18.221.127.237/categories").then(function(e){if(200!==e.status)return alert("Error while fetching data."),void e.json().then(function(e){viewModel.failuerMessage(e.message)});e.json().then(function(e){viewModel.categories(e.categories)})}).catch(function(e){alert("Error while fetching data."),console.log("Fetch Error :-S",e)})},getPosts:function(){null!=localStorage.getItem("access_token")&&do_getPosts()},filterPosts:function(t){var e=viewModel.posts().filter(function(e){return e.category_id==t.id});viewModel.filteredPosts(e)},clearFilter:function(){viewModel.filteredPosts.removeAll()},addPost:function(){var e=viewModel.addPostInputs,t=e.title,o=[t],a=$("#category").val(),s=CKEDITOR.instances.addPostBody.getData();if(a.length<1)return!1;if(s.length<20)return $("#addPostBody").css("border","1px solid red"),e.body.valid(!1),!1;for(var i in e.body.valid(!0),o){var n=o[i];if(!0!==n.valid())return void n.valid(!1)}do_addPost({category_id:a,title:t.value(),body:s})&&(s="",t.value(""),$(".modal").modal("hide"),viewModel.getPosts(),viewModel.successMessage("Added Post successfully."))},addPostInputs:{category:{value:ko.observable(""),valid:ko.observable()},title:{value:ko.observable(""),valid:ko.observable()},body:{value:ko.observable(""),valid:ko.observable()}},validateAddPostInputs:{validateCategory:function(){var e=viewModel.addPostInputs.category;0<e.value().length?valid.valid(!1):e.valid(!0)},validateTitle:function(){var e=viewModel.addPostInputs.title;e.value().length<6?e.valid(!1):e.valid(!0)},validateBody:function(){viewModel.addPostInputs.body.valid(!0)}},setPostToEdit:function(e,t){var o=viewModel.postToEditInputs;o.id.value(e.id),o.category.value(e.category),o.title.value(e.title),o.body.value(e.body)},postToEditInputs:{id:{value:ko.observable("")},category:{value:ko.observable(""),valid:ko.observable()},title:{value:ko.observable(""),valid:ko.observable(!0)},body:{value:ko.observable(""),valid:ko.observable(!0)}},validatePostToEditInputs:{validateCategory:function(){var e=viewModel.postToEditInputs.category;0<e.value().length?valid.valid(!1):e.valid(!0)},validateTitle:function(){var e=viewModel.postToEditInputs.title;e.value().length<6?e.valid(!1):e.valid(!0)},validateBody:function(){var e=viewModel.postToEditInputs.body;e.value().length<6?e.valid(!1):e.valid(!0)}},editPost:function(){var e=viewModel.postToEditInputs,t=e.title,o=e.body,a=[t,o],s=$("#editCategory").val();if(s.length<1)return $("#editCategory").css("border","1px solid red"),!1;for(var i in $("#editCategory").css("border","1px solid black"),a){var n=a[i];if(!0!==n.valid())return void n.valid(!1)}do_editPost({id:viewModel.postToEditInputs.id.value(),category_id:s,title:t.value(),body:o.value()})&&($(".modal").modal("hide"),viewModel.successMessage("Edited Post successfully."))},fetchData:function(){null!=localStorage.getItem("access_token")&&(viewModel.getCategories(),viewModel.getPosts())},removeDataFromView:function(){viewModel.posts.removeAll(),viewModel.categories.removeAll()},removePost:function(e){do_deletePost(e.id)},removePostLocally:function(t){viewModel.posts.remove(function(e){return e.id==t})}};function do_signin(e){return fetch("http://18.221.127.237/auth",{body:JSON.stringify(e),cache:"no-cache",headers:{"content-type":"application/json"},method:"POST"}).then(function(e){200===e.status?e.json().then(function(e){var t=e.access_token;return viewModel.saveAccessToken(t),getUserInfo(e.user_id),viewModel.loggedinUser(!0),viewModel.successMessage("You are now loggedIn successfully!"),!0}):401===e.status?(alert("Sign in: Not Authorized to modify this content."),e.json().then(function(e){var t=e.description+", Please try again!";return console.log(t),viewModel.failuerMessage(e.description),!1})):500===e.status&&(alert("Internal server error, Please try again later."),e.json().then(function(e){return viewModel.failuerMessage(e.description),!1}))})}function getUserInfo(e){fetch("http://18.221.127.237/user_id/"+e,{cache:"no-cache",headers:{authorization:"JWT "+localStorage.getItem("access_token")},method:"GET"}).then(function(e){200===e.status?e.json().then(function(e){return localStorage.setItem("username",e.username),viewModel.username(e.username),!0}):401===e.status?(alert("Not Authorized to modify this content."),e.json().then(function(e){e.description;return viewModel.failuerMessage(e.description),!1})):500===e.status&&(alert("Internal server error, Please try again later."),e.json().then(function(e){return viewModel.failuerMessage(e.description),!1}))})}function do_signup(e){return fetch("http://18.221.127.237/user/register",{body:JSON.stringify(e),cache:"no-cache",headers:{"content-type":"application/json"},method:"POST"}).then(function(e){201===e.status?e.json().then(function(e){return viewModel.successMessage("You are now digned up, and may login successfully!"),!0}):401===e.status?(alert("Not Authorized to modify this content."),e.json().then(function(e){e.description;return viewModel.failuerMessage(e.description),!1})):500===e.status&&(alert("Internal server error, Please try again later."),e.json().then(function(e){return viewModel.failuerMessage(e.description),!1}))})}function GsignInCallback(e){var t={code:e.code};fetch("http://18.221.127.237/login",{method:"POST",headers:{Accept:"application/json","Content-Type":"appication/json"},body:JSON.stringify(t),cache:"no-cache"}).then(function(e){return e.json()}).then(function(e){do_signin({email:e.email,password:"default_password"}),$(".modal").modal("hide")})}function do_addPost(e){return fetch("http://18.221.127.237/post/add",{body:JSON.stringify(e),cache:"no-cache",headers:{"content-type":"application/json",authorization:"JWT "+localStorage.getItem("access_token")},method:"POST"}).then(function(e){401===e.status&&e.json().then(function(e){return viewModel.failuerMessage(e.message),!1}),e.json().then(function(e){return viewModel.successMessage(e.message),do_getPosts(),!0})})}function do_getPosts(){fetch("http://18.221.127.237/posts",{headers:{Authorization:"JWT "+localStorage.getItem("access_token")}}).then(function(e){if(200!==e.status)return alert("An error has ocurred, Please try again later."),void e.json().then(function(e){viewModel.failuerMessage(e.message)});e.json().then(function(e){viewModel.posts(e.posts),viewModel.posts.reverse()})}).catch(function(e){alert("An error has ocurred, Please try again later."),console.log("Fetch Error :-S",e)})}function do_deletePost(t){fetch("http://18.221.127.237/post/"+t,{headers:{Authorization:"JWT "+localStorage.getItem("access_token")},method:"DELETE"}).then(function(e){return 401==e.status?(viewModel.failuerMessage("Not Authorized to remove this post."),!1):500===e.status?(viewModel.failuerMessage("Something went wrong, please try again later"),!1):void(200===e.status?e.json().then(function(e){return viewModel.removePostLocally(t),!0}):alert("An error has ocurred, Please try again later."))})}function do_editPost(e){fetch("http://18.221.127.237/post/"+e.id,{headers:{"content-type":"application/json",Authorization:"JWT "+localStorage.getItem("access_token")},method:"PUT",body:JSON.stringify({category_id:e.category_id,title:e.title,body:e.body})}).then(function(e){return 401==e.status?(alert("Not Authorized to modify this content."),viewModel.failuerMessage("Not Authorized to edit this post."),!1):500===e.status?(alert("Internal server error, Please try again later."),viewModel.failuerMessage("Something went wrong, please try again later"),!1):void(200===e.status?e.json().then(function(e){return do_getPosts(),$(".modal").modal("hide"),!0}):alert("An error has ocurred, Please try again later."))})}ko.applyBindings(viewModel);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
